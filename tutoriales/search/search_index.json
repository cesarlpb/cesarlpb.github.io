{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Blog","text":"<p>\u00a1Bienvenid@ al blog de <code>Codr</code>!</p> <p>El objetivo es ense\u00f1ar a tod@s las habilidades necesarias para iniciar o reforzar una carrera en el sector del desarrollo de aplicaciones y/o alguna rama de IT. </p> <p>El contenido no presupone conocimiento previo. Habr\u00e1 contenido desde cero hasta avanzado. Encontrar\u00e1s etiquetas sobre el nivel de conocimiento en cada post o tutorial.</p> <p>\u00bfList@? \u00a1Vamos a ello!</p> <p></p>"},{"location":"#roadmaps","title":"Roadmaps","text":"<p>Aqu\u00ed recomendar\u00e9 una lista de temas y habilidades a dominar por especializaci\u00f3n.</p>"},{"location":"#front-end","title":"Front-end","text":"<p>Especialidad en lado visual de interfaces web o de apps. Puede incluir UX/UI o dise\u00f1o - y es de valorar - pero no es imprescindible. B\u00e1sicamente, tu tarea principal es centrar divs y maquetar dise\u00f1os de Figma, Adobe XD, etc.</p>"},{"location":"#back-end","title":"Back-end","text":"<p>Es el t\u00edo/la t\u00eda de la silla. \ud83e\ude91</p> <p>En este especialidad te encargas de dise\u00f1ar y programar la funcionalidad de una app, conexi\u00f3n a base de datos, integraci\u00f3n de APIs, etc. Es decir, te encargas de funciones core de un servicio, una p\u00e1gina, etc. Requiere conocimiento de manipulaci\u00f3n de datos, modelos, db, y servidor.</p>"},{"location":"#full-stack","title":"Full-stack","text":"<p>En teor\u00eda, se supone que este perfil \"incluye\" a los dos anteriores pero en la pr\u00e1cticas se suele tener m\u00e1s experiencia en uno de los lados, cliente o servidor, y conocimientos de ambos. Alguien \"full-stack\" debe poder pivotar entre ambos roles, un d\u00eda maquetas front-end y otro integras un API, o ambas cosas el mismo d\u00eda. Es divertido.</p>"},{"location":"#base-de-datos","title":"Base de datos","text":"<p>En esta especialidad te encargas de mantener la base de datos en buen estado. Incluye dise\u00f1ar la estructura de la base de datos, crear las tablas, modelos necesarios, etc. Adem\u00e1s, hay que tener alg\u00fan conocimiento de seguridad b\u00e1sica para no permitir inyecci\u00f3n de SQL o vulnerabilidades habituales conocidas.</p>"},{"location":"#administracion-de-sistemas","title":"Administraci\u00f3n de sistemas","text":"<p>Esta rama requiere que entiendas de sistemas inform\u00e1ticos, consola y servidor. Tus tareas implicar\u00e1n configurar el servidor y/o equipos de trabajo para mantener el correcto funcionamiento de los servicios de la empresa o dar mantenimiento para que tus compa\u00f1eros puedan desempe\u00f1ar su trabajo.</p>"},{"location":"#despliegue-y-cdci","title":"Despliegue y CD/CI","text":"<p>Te encargas de dise\u00f1ar, configurar y mantener el pipeline para que tus compa\u00f1eros puedan trabajar en los repositorios de forma adecuada. Es decir, configuras los <code>workflows</code> que se disparan cuando alguien hace <code>commit</code>, <code>pull request</code>, etc a una rama para que no llegue nada a <code>desarrollo</code>, <code>staging</code> o <code>producci\u00f3n</code> si no pasa los tests necesarios de forma autom\u00e1tica. </p>"},{"location":"#ciberseguridad","title":"Ciberseguridad","text":"<p>Es una de las ramas mejor pagadas. La responsabilidad es muy alta, tambi\u00e9n. Te encargas de auditar servicios, apps, servidores, redes, etc. - en general, sistemas - para encontrar huecos en la seguridad, es decir, vectores de ataque. En el manual vale todo, si consigues hacer magia para desvelar una vulnerabilidad es lo \u00fanico que cuenta. </p> <p>Tambi\u00e9n hay roles que se encargan de participar en la implementaci\u00f3n de las mejoras de manera activa o de realizar ataques para encontrar esas vulnerabilidades. \u00a1No se van a encontrar solas! </p> <p>Es curioso que este rol no requiera conocimientos de programaci\u00f3n pero s\u00ed se beneficia mucho de ello.</p> <p></p>"},{"location":"#otros","title":"Otros","text":"<p>M\u00e1s roles aqu\u00ed. </p>"},{"location":"categories/","title":"Categor\u00edas","text":""},{"location":"blog/","title":"Blog","text":"<p>Posts y tutoriales para aprender temas de full-stack: </p> Ver lista de contenidos del blog (WIP) <ul> <li>Front-end: HTML, CSS, JS <li>Back-end: Python, Django</li> <li>Bases de datos: SQL con providers:</li> <ul> <li>SQLite3</li> <li>MySQL</li> <li>PostgreSQL</li> </ul> <li>Deployment:</li> <ul> <li>PythonAnywhere</li> <li>Clouding</li> <li>PM2</li> <li>Otros</li> </ul> <li>Machine Learning + IA:</li> <ul> <li>Redes Neuronales</li> <li>Pytorch</li> <li>TensorFlow</li> </ul>"},{"location":"blog/category/","title":"Categor\u00edas","text":"<p>Las principales categor\u00edas actuales:</p> <ul> <li>Django</li> </ul>"},{"location":"blog/2024/06/26/azure-fundamentals-AZ900/","title":"AZ 900","text":"<p>Apuntes para preparar el examen de Azure fundmentals AZ900</p>","tags":["cloud","certificaciones","AZ900"]},{"location":"blog/2024/06/26/azure-fundamentals-AZ900/#conceptos-basicos","title":"Conceptos b\u00e1sicos","text":"Parte I: descripci\u00f3n de la nube (cloud) Describir la Nube Conceptos Clave: <ul> <li>Identificar beneficios y consideraciones del uso de servicios en la nube.</li> <li>Describir diferencias entre categor\u00edas de servicios y tipos de computaci\u00f3n en la nube.</li> </ul> Objetivos: <ol> <li>Identificar beneficios como alta disponibilidad, escalabilidad, elasticidad, agilidad y recuperaci\u00f3n de desastres.</li> <li>Diferenciar entre gastos de capital (CapEx) y gastos operativos (OpEx).</li> <li>Describir el modelo basado en el consumo.</li> </ol> \u00bfQu\u00e9 es la Computaci\u00f3n en la Nube? <p>La computaci\u00f3n en la nube permite el acceso a recursos inform\u00e1ticos a trav\u00e9s de Internet sin necesidad de infraestructura local. Proveedores como Amazon Web Services, Google Cloud Platform y Microsoft Azure ofrecen servicios en un modelo de pago por uso, permitiendo flexibilidad y escalabilidad.</p> Beneficios Econ\u00f3micos <p>La nube es m\u00e1s econ\u00f3mica debido a:</p> <ul> <li>Modelo de pago por uso.</li> <li>Eliminaci\u00f3n de inversiones en hardware.</li> <li>Escalabilidad seg\u00fan demanda.</li> <li>Precios reducidos gracias a econom\u00edas de escala y eficiencia de los proveedores.</li> </ul> Tipos de Nubes <ul> <li>Nube P\u00fablica: Sin costos de capital inicial, paga solo por lo que se usa.</li> <li>Nube Privada: Mayor control y seguridad, pero requiere inversi\u00f3n en hardware.</li> <li>Nube H\u00edbrida: Combina ambas, ofreciendo flexibilidad y control.</li> </ul> Ventajas de la Computaci\u00f3n en la Nube <ul> <li>Alta Disponibilidad: Experiencia continua sin tiempo de inactividad.</li> <li>Escalabilidad: Vertical (agregar RAM/CPU) y horizontal (agregar m\u00e1quinas virtuales).</li> <li>Elasticidad: Recursos seg\u00fan demanda.</li> <li>Agilidad: R\u00e1pida implementaci\u00f3n y configuraci\u00f3n de recursos.</li> <li>Distribuci\u00f3n Geogr\u00e1fica: Mejora rendimiento y acceso global.</li> <li>Recuperaci\u00f3n ante Desastres: Copias de seguridad y replicaci\u00f3n de datos.</li> </ul> CapEx vs. OpEx <ul> <li>CapEx: Gasto inicial en infraestructura f\u00edsica.</li> <li>OpEx: Gasto en servicios actuales, sin costo inicial, pagando conforme se usa.</li> </ul> Modelos de Servicios en la Nube IaaS (Infrastructure as a Service): <ul> <li>Agilidad y flexibilidad en la gesti\u00f3n de hardware.</li> <li>Modelo basado en el consumo.</li> </ul> PaaS (Platform as a Service): <ul> <li>Agilidad superior al no requerir configuraci\u00f3n de servidores.</li> <li>Enfocado en el desarrollo de aplicaciones.</li> </ul> SaaS (Software as a Service): <ul> <li>Acceso a aplicaciones desde cualquier lugar.</li> <li>Pago por suscripci\u00f3n mensual o anual.</li> </ul> Computaci\u00f3n Serverless <p>Permite a los desarrolladores enfocarse en crear aplicaciones sin gestionar infraestructura. Escalable y basado en eventos.</p> \u00bfQu\u00e9 es Azure? <p>Azure es una plataforma de servicios en la nube de Microsoft que permite crear, gestionar y desplegar aplicaciones en una red global utilizando herramientas y marcos familiares.</p> Parte II: servicios core en la nube (cloud) Servicios Core en la Nube Objetivos: <ul> <li>Describir los servicios principales de Azure.</li> <li>Describir los componentes b\u00e1sicos de la arquitectura de Azure.</li> <li>Describir los recursos principales disponibles en Azure.</li> </ul> Informaci\u00f3n General de Azure <ul> <li>Recursos: Instancias de servicios creadas, como m\u00e1quinas virtuales, almacenamiento o bases de datos SQL.</li> <li>Grupos de Recursos: Contenedores l\u00f3gicos donde se implementan y administran recursos de Azure.</li> <li>Suscripciones: Agrupan cuentas de usuario y recursos creados, con l\u00edmites y cuotas.</li> <li>Grupos de Administraci\u00f3n: Ayudan a gestionar el acceso, la pol\u00edtica y el cumplimiento de varias suscripciones.</li> </ul> Regiones de Azure <ul> <li>Regi\u00f3n: \u00c1rea geogr\u00e1fica con uno o m\u00e1s centros de datos conectados con una red de baja latencia.</li> <li>Regiones Especiales: Incluyen instancias aisladas para socios y agencias gubernamentales de EE. UU., y regiones en China gestionadas por 21Vianet.</li> </ul> Zonas de Disponibilidad <p>Centros de datos separados f\u00edsicamente dentro de una regi\u00f3n de Azure, equipados con alimentaci\u00f3n, refrigeraci\u00f3n y redes independientes. Est\u00e1n dise\u00f1ados para ser l\u00edmites de aislamiento y est\u00e1n conectados a trav\u00e9s de redes privadas de fibra \u00f3ptica de alta velocidad.</p> Pares de Regiones <p>Regiones emparejadas para minimizar el tiempo de inactividad y garantizar la recuperaci\u00f3n r\u00e1pida durante interrupciones extensas.</p> Azure Resource Manager <p>Servicio de implementaci\u00f3n y administraci\u00f3n que permite crear, actualizar y eliminar recursos. Proporciona una capa de administraci\u00f3n con control de acceso, bloqueos y etiquetas para organizar los recursos.</p> Suscripciones de Azure <ul> <li>L\u00edmite de Facturaci\u00f3n: Permite crear suscripciones para diferentes requisitos de facturaci\u00f3n con informes y facturas independientes.</li> <li>L\u00edmite de Control de Acceso: Aplica pol\u00edticas de administraci\u00f3n de acceso a nivel de suscripci\u00f3n.</li> </ul> Grupos de Administraci\u00f3n de Azure <p>Organizan suscripciones en contenedores y aplican condiciones de gobierno. Las suscripciones dentro de un grupo de administraci\u00f3n heredan las condiciones aplicadas.</p> Calcular <ul> <li>M\u00e1quinas Virtuales: Emulaciones de software de computadoras f\u00edsicas, incluyendo procesador virtual, memoria, almacenamiento y recursos de red.</li> <li>Contenedores: Entornos de aplicaciones virtualizados y livianos para crear y escalar r\u00e1pidamente.</li> <li>Servicio de Aplicaciones: Plataforma para crear, desplegar y escalar aplicaciones web, m\u00f3viles y API.</li> <li>Funciones de Azure: Permiten realizar trabajos en respuesta a eventos espec\u00edficos sin gestionar infraestructura.</li> </ul> Redes Virtuales de Azure <p>Permiten que los recursos de Azure se comuniquen entre s\u00ed y con usuarios en Internet. Proporcionan funcionalidades clave como aislamiento, segmentaci\u00f3n, enrutamiento y filtrado del tr\u00e1fico de red.</p> Almacenamiento de Azure <ul> <li>Disk Storage: Proporciona discos para m\u00e1quinas virtuales con diferentes tama\u00f1os y niveles de rendimiento.</li> <li>Blob Storage: Almacena grandes cantidades de datos no estructurados.</li> <li>Azure Files: Ofrece recursos compartidos de archivos accesibles a trav\u00e9s de protocolos est\u00e1ndar.</li> </ul> Bases de Datos en Azure <ul> <li>Azure Cosmos DB: Servicio de base de datos multimodelo distribuido globalmente.</li> <li>Azure SQL Database: Base de datos relacional basada en Microsoft SQL Server.</li> <li>Azure Database for MySQL: Servicio de base de datos relacional basado en MySQL Community Edition.</li> <li>Azure Database for PostgreSQL: Servicio de base de datos relacional basado en PostgreSQL.</li> <li>Instancia Administrada de Azure SQL: Combina compatibilidad con SQL Server con beneficios de PaaS.</li> </ul> Herramientas de An\u00e1lisis de Azure <ul> <li>Azure Synapse Analytics: Servicio de an\u00e1lisis ilimitado que combina almacenamiento de datos y an\u00e1lisis de big data.</li> <li>Azure Data Factory: Servicio de integraci\u00f3n de datos para orquestar y automatizar el movimiento y la transformaci\u00f3n de datos.</li> <li>Azure Databricks: Plataforma para obtener informaci\u00f3n de datos y crear soluciones de inteligencia artificial.</li> <li>Azure Data Lake Storage y Analytics: Dep\u00f3sito de almacenamiento para grandes cantidades de datos y servicio de an\u00e1lisis bajo demanda.</li> </ul> Parte III: Principales Servicios en la Nube y Herramientas de Administraci\u00f3n en Azure Principales Servicios en la Nube y Herramientas de Administraci\u00f3n en Azure Objetivos: <ul> <li>Describir las soluciones principales disponibles en Azure.</li> <li>Describir las herramientas de administraci\u00f3n de Azure.</li> </ul> Internet de las Cosas (IoT) <p>IoT permite que los dispositivos recopilen y transmitan informaci\u00f3n para an\u00e1lisis de datos a trav\u00e9s de sensores inteligentes.</p> Centro de IoT de Azure (Azure IoT Hub): <p>Servicio gestionado para la comunicaci\u00f3n bidireccional entre dispositivos IoT y aplicaciones. Admite m\u00faltiples patrones de mensajer\u00eda y permite la conexi\u00f3n de cualquier dispositivo.</p> Azure IoT Central: <p>Basado en IoT Hub, proporciona una interfaz para conectar, monitorear y administrar dispositivos IoT con facilidad.</p> Azure Sphere: <p>Soluci\u00f3n integral de IoT que abarca desde hardware hasta un m\u00e9todo seguro de env\u00edo de mensajes. Incluye MCU, un sistema operativo Linux personalizado y un servicio de seguridad (AS3).</p> Servicios Cognitivos y de Machine Learning Azure Machine Learning: <p>Plataforma para hacer predicciones con herramientas y servicios para entrenar y probar modelos. Permite implementar modelos como API para uso en tiempo real.</p> Azure Cognitive Services: <p>Proporciona modelos de aprendizaje autom\u00e1tico para aplicaciones que pueden ver, o\u00edr, hablar, comprender y razonar. Accesible a trav\u00e9s de APIs.</p> Servicio de Bots de Azure: <p>Plataforma para crear agentes virtuales que entienden y responden preguntas como un ser humano, facilitando tareas automatizadas y repetitivas.</p> Servicios DevOps Azure DevOps Services: <p>Conjunto de servicios que abordan cada etapa del ciclo de vida del desarrollo de software, incluyendo repositorios de c\u00f3digo, gesti\u00f3n de proyectos, automatizaci\u00f3n de pipelines CI/CD, y pruebas automatizadas.</p> GitHub y GitHub Actions: <p>Repositorio de c\u00f3digo fuente y plataforma de colaboraci\u00f3n para proyectos de software. GitHub Actions permite la automatizaci\u00f3n de flujos de trabajo CI/CD.</p> Azure DevTest Labs: <p>Proporciona un medio automatizado para administrar la creaci\u00f3n, configuraci\u00f3n y desmontaje de m\u00e1quinas virtuales para pruebas de software.</p> Seguridad en Azure Azure Security Center: <p>Servicio de supervisi\u00f3n que proporciona visibilidad de la postura de seguridad en servicios locales y en la nube. Ofrece recomendaciones de seguridad y detecta amenazas.</p> Azure Sentinel: <p>Sistema SIEM basado en la nube que utiliza an\u00e1lisis de seguridad inteligente y an\u00e1lisis de amenazas. Permite recopilar datos, detectar amenazas, investigar y responder a incidentes.</p> Azure Key Vault: <p>Servicio para almacenar y gestionar de forma segura secretos, claves de cifrado y certificados SSL/TLS. Facilita el control de acceso y la supervisi\u00f3n de estos recursos.</p> Azure Dedicated Host: <p>Proporciona servidores f\u00edsicos dedicados para alojar m\u00e1quinas virtuales, con visibilidad y control sobre la infraestructura del servidor.</p> Herramientas de Administraci\u00f3n de Azure Azure Portal: <p>Interfaz web gr\u00e1fica para gestionar servicios de Azure, crear nuevos servicios y configurar los existentes.</p> Aplicaci\u00f3n M\u00f3vil de Azure: <p>Proporciona acceso a recursos de Azure desde dispositivos iOS y Android, permitiendo la monitorizaci\u00f3n y gesti\u00f3n de recursos.</p> Azure PowerShell y Azure CLI: <p>Herramientas de l\u00ednea de comandos para ejecutar tareas de administraci\u00f3n en Azure, disponibles para Windows, Linux y Mac.</p> Plantillas ARM: <p>Describen los recursos a utilizar en un formato JSON declarativo, permitiendo la creaci\u00f3n de recursos de manera repetible y automatizada.</p> Monitorizaci\u00f3n y Asesor\u00eda Azure Monitor: <p>Plataforma para recopilar, analizar y visualizar datos de m\u00e9tricas y registros de todo el entorno local y de Azure.</p> Azure Service Health: <p>Proporciona una vista personalizada del estado de los servicios de Azure, mostrando problemas localizados y eventos de mantenimiento.</p> Azure Advisor: <p>Eval\u00faa recursos de Azure y hace recomendaciones para mejorar la confiabilidad, seguridad, rendimiento y reducir costos.</p> Seguridad de Red Azure Firewall: <p>Servicio de seguridad de red administrado y basado en la nube que protege los recursos en redes virtuales de Azure. Proporciona reglas de aplicaci\u00f3n, red y NAT.</p> Protecci\u00f3n contra DDoS de Azure: <p>Ayuda a proteger recursos de Azure contra ataques DDoS, utilizando la escala y elasticidad de la red global de Microsoft para mitigar ataques antes de que afecten la disponibilidad del servicio.</p> <p>continuar\u00e1...</p>","tags":["cloud","certificaciones","AZ900"]},{"location":"blog/2024/06/28/librerias-fundamentales-python/","title":"Librer\u00edas Fundamentales de Python","text":"<p>Algunas de las librer\u00edas m\u00e1s usadas en Python con ejemplos y cuadernos:</p> <p>Repositorio:: @cesarlpb/learn-python</p>","tags":["Numpy","Pandas","Matplotlib","Scikit","Seaborn"]},{"location":"blog/2024/06/28/librerias-fundamentales-python/#pandas","title":"Pandas","text":"<p>La librer\u00eda de facto que usamos cuando queremos manipular datos, acceder a registros (<code>.csv</code>, <code>.json</code>, etc). Sirve para limpiar, ordenar y filtrar datasets para realizar estudios.</p> README Cuaderno","tags":["Numpy","Pandas","Matplotlib","Scikit","Seaborn"]},{"location":"blog/2024/06/28/librerias-fundamentales-python/#matplotlib","title":"Matplotlib","text":"<p>La go to librer\u00eda cuando queremos graficar (plot en ingl\u00e9s) datos en Python. Tiene mucha versatilidad en las opciones y es posible personalizar lo charts mucho.</p>","tags":["Numpy","Pandas","Matplotlib","Scikit","Seaborn"]},{"location":"blog/2024/06/28/librerias-fundamentales-python/#numpy","title":"Numpy","text":"<p>La librer\u00eda num\u00e9rica que en la que se apoyan muchas otras. Los tipos de datos de <code>numpy</code> ayudan a gestionar operaciones num\u00e9ricas de forma eficiente.</p>","tags":["Numpy","Pandas","Matplotlib","Scikit","Seaborn"]},{"location":"blog/2024/06/28/librerias-fundamentales-python/#scikit","title":"Scikit","text":"<p>Librer\u00eda cient\u00edfica con funcionalidades de <code>machine learning</code> y aprendizaje autom\u00e1tico. Tiene gran cantidad de funciones para usar algoritmos de ML.</p>","tags":["Numpy","Pandas","Matplotlib","Scikit","Seaborn"]},{"location":"blog/2024/06/28/librerias-fundamentales-python/#seaborn","title":"Seaborn","text":"<p>Librer\u00eda para visualizar datos que se basa en matplotlib. Se usa sobre todo para datos estad\u00edsticos o complejos haciendo m\u00e1s f\u00e1cil la visualizaci\u00f3n.</p>","tags":["Numpy","Pandas","Matplotlib","Scikit","Seaborn"]},{"location":"blog/2024/06/13/intro-a-django/","title":"Introducci\u00f3n a Django","text":"<p>Django es un framework web de alto nivel escrito en Python que permite un desarrollo r\u00e1pido y un dise\u00f1o limpio y pragm\u00e1tico. Fue dise\u00f1ado para ayudarte a construir aplicaciones web de una manera m\u00e1s f\u00e1cil y r\u00e1pida.</p>","tags":["full-stack","intro"]},{"location":"blog/2024/06/13/intro-a-django/#por-que-usar-django","title":"\u00bfPor qu\u00e9 usar Django?","text":"Estructura de archivos de Django <p>Django proporciona una serie de caracter\u00edsticas que lo hacen destacar entre otros frameworks web:</p> <ol> <li>Desarrollo R\u00e1pido: Django te permite desarrollar aplicaciones web de manera r\u00e1pida y eficiente. Con su arquitectura basada en el patr\u00f3n Modelo-Vista-Plantilla (MVT), puedes construir y escalar proyectos web de manera organizada.</li> <li>Seguro por Defecto: Django toma la seguridad en serio y ayuda a los desarrolladores a evitar errores comunes de seguridad, como la inyecci\u00f3n SQL, los ataques de scripts entre sitios y la falsificaci\u00f3n de solicitudes entre sitios.</li> <li>Escalable y Vers\u00e1til: Desde sitios personales hasta proyectos empresariales, Django puede manejar diferentes niveles de complejidad y tr\u00e1fico.</li> <li>Comunidad Activa: Con una comunidad grande y activa, siempre hay recursos disponibles, desde documentaci\u00f3n hasta foros y grupos de usuarios.</li> </ol>","tags":["full-stack","intro"]},{"location":"blog/2024/06/13/intro-a-django/#componentes-principales-de-django","title":"Componentes Principales de Django","text":"Diagrama de Django <ol> <li>Modelos: Representan la estructura de los datos y permiten interactuar con la base de datos.</li> <li>Vistas: Contienen la l\u00f3gica de negocio y procesan las solicitudes del usuario.</li> <li>Plantillas: Definen c\u00f3mo se presentan los datos en el navegador.</li> <li>URLs: Mapean las solicitudes a las vistas correspondientes.</li> </ol>","tags":["full-stack","intro"]},{"location":"blog/2024/06/13/intro-a-django/#primeros-pasos-con-django","title":"Primeros Pasos con Django","text":"<p>Para comenzar a trabajar con Django, sigue estos pasos b\u00e1sicos:</p> <ol> <li> <p>Instalaci\u00f3n: Aseg\u00farate de tener Python instalado. Luego, instala Django usando pip:    <code>bash    pip install django</code></p> </li> <li> <p>Crear un Proyecto: Crea un nuevo proyecto Django utilizando el comando:    <code>bash    django-admin startproject mi_proyecto    cd mi_proyecto</code></p> </li> <li> <p>Ejecutar el Servidor de Desarrollo: Inicia el servidor de desarrollo para ver tu proyecto en acci\u00f3n:    <code>bash    python manage.py runserver</code></p> </li> <li> <p>Crear una Aplicaci\u00f3n: Dentro de tu proyecto, crea una nueva aplicaci\u00f3n:    <code>bash    python manage.py startapp mi_aplicacion</code></p> </li> </ol>","tags":["full-stack","intro"]},{"location":"blog/2024/06/13/intro-a-django/#conclusion","title":"Conclusi\u00f3n","text":"<p>Django es una herramienta poderosa para desarrollar aplicaciones web con Python. Con su enfoque en la simplicidad y la reutilizaci\u00f3n de componentes, puedes construir y escalar tus proyectos web de manera eficiente. En pr\u00f3ximos art\u00edculos, exploraremos m\u00e1s en detalle cada componente y funcionalidad de Django.</p>","tags":["full-stack","intro"]},{"location":"django/","title":"Tutoriales de Django","text":"<p>Aqu\u00ed encontrar\u00e1s una colecci\u00f3n de tutoriales para comenzar con Django y profundizar en temas m\u00e1s avanzados.</p>"},{"location":"django/#contenidos","title":"Contenidos","text":""},{"location":"django/#primeros-pasos","title":"Primeros Pasos","text":"<ul> <li>Instalar Python: Aprende a instalar Python en tu sistema.</li> <li>Crear venv: Configura un entorno virtual para tu proyecto.</li> <li>Ejecutar Django: Inicia un proyecto Django y ejecuta el servidor de desarrollo.</li> </ul>"},{"location":"django/#primer-proyecto","title":"Primer Proyecto","text":"<ul> <li>MiPrimerDjango: Crea tu primer proyecto Django desde cero.</li> </ul>"},{"location":"django/#w3schools","title":"W3schools","text":"<ul> <li>Tutorial de W3schools: Gu\u00eda completa de Django en W3schools.</li> </ul>"},{"location":"django/#django-docs","title":"Django Docs","text":"<ul> <li>Documentaci\u00f3n oficial de Django: Referencia oficial de Django.</li> </ul>"},{"location":"django/#como-servir-html","title":"Como Servir HTML","text":"<ul> <li>Paso 1: setup: Configuraci\u00f3n inicial.</li> <li>Paso 2: crear template: Creaci\u00f3n de templates.</li> <li>Paso 3: crear view: Creaci\u00f3n de vistas.</li> <li>Paso 4: crear url: Configuraci\u00f3n de URLs.</li> <li>Paso 5: servir: Servir contenido est\u00e1tico.</li> </ul>"},{"location":"django/como-servir-html/","title":"C\u00f3mo Servir HTML con Django","text":"<p>Para completar este tutorial se debe tener un proyecto de Django creado, si a\u00fan no  has creado un proyecto, puedes seguir este tutorial para crear un proyecto. </p> <p>Puedes incluir el template en el proyecto o en una app. Si necesitas crear una app puedes seguir este tutorial sobre c\u00f3mo crear una app en Django</p> <ul> <li>Post sobre las diferencias entre app y proyectos en Django. \u00bfQu\u00e9 son y cu\u00e1ndo necesitas cada uno?</li> </ul> <p>Django se basa en el patr\u00f3n Model-View-Template (MVT). En este tutorial no incluiremos la parte del modelo pero puedes ver c\u00f3mo funcionan estos componentes en el diagrama siguiente:</p> <p></p> <ul> <li>Model: Representa la estructura de los datos y maneja la l\u00f3gica de la base de datos. Los modelos se definen en el archivo models.py de una aplicaci\u00f3n Django y suelen utilizarse para definir las tablas y campos de la base de datos.</li> </ul> <p>Si ya tienes claro d\u00f3nde colocar este HTML (template) que quieres servir con Django vamos a empezar con el tutorial.</p> computer, science, ofc."},{"location":"django/como-servir-html/02.crear_template/","title":"Crear HTML (template)","text":"<p>El <code>template</code> es uno de los componentes del patr\u00f3n de dise\u00f1o Model-View-Template (MVT), siendo el template el encargado de colocar los elementos para la interfaz web, para lo cual se usa HTML + CSS + JS + lenguaje de plantilla = Django template, el cual permite ejecutar l\u00f3gica de Python en lado servidor:</p> <p></p> <ul> <li>Template: Se encarga de la presentaci\u00f3n y renderiza los datos en una respuesta HTML. Los templates son archivos HTML que pueden contener etiquetas de template de Django para insertar din\u00e1micamente los datos pasados por la vista.</li> </ul> <p>Vamos a empezar por crear el template que vamos a servir,  debe estar en la carpeta <code>templates</code> y es un archivo <code>.html</code> al que podemos a\u00f1adir lenguaje de plantilla, <code>Django template</code>, m\u00e1s adelante:</p> <pre><code>  &lt;!-- &lt;mi_aplicacion o proyecto&gt;/templates/mi_template.html --&gt;\n  &lt;!DOCTYPE html&gt;\n  &lt;html&gt;\n  &lt;head&gt;\n      &lt;title&gt;Mi Template&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n      &lt;h1&gt;\u00a1Hola desde el template!&lt;/h1&gt;\n  &lt;/body&gt;\n  &lt;/html&gt;\n</code></pre> <p>\u00bfYa lo tienes? \u00a1Sigamos con el siguiente paso! \ud83d\udc49\ud83c\udffc</p>"},{"location":"django/como-servir-html/03.crear_view/","title":"Crear Vista","text":"<p>La vista, <code>view</code> es uno de los componentes del patr\u00f3n de dise\u00f1o \"Model-View-Template\" (MVT), siendo el view el encargado de ejecutar l\u00f3gica cuando se pide un recurso:</p> <ul> <li>View: Maneja la l\u00f3gica de la aplicaci\u00f3n y las interacciones del usuario. Las vistas reciben solicitudes HTTP, procesan los datos necesarios y devuelven una respuesta HTTP. Las vistas se definen en el archivo <code>views.py</code>. En la pr\u00e1ctica, un view se define con una funci\u00f3n, <code>def</code>, o una <code>clase</code> con m\u00e9todos.</li> </ul> <p></p> <pre><code>   from django.shortcuts import render\n\n   def mi_vista(request):\n       return render(request, 'mi_template.html')\n</code></pre> <p>\u00bfYa lo tienes? \u00a1Sigamos con el siguiente paso! \ud83d\udc49\ud83c\udffc</p>"},{"location":"django/como-servir-html/04.crear_url/","title":"Configurar Urls","text":"<p>Las rutas a las que se puede acceder en nuestra aplicaci\u00f3n se configuran en <code>urls.py</code> y pueden desempe\u00f1ar varios usos:</p> <ul> <li>Servir archivos o templates</li> <li>Redirecciones</li> <li>Endpoints de APIs, etc.</li> </ul> <p></p> <p>Para habilitar una ruta para nuestro view debemos colocar un c\u00f3digo similar a este en <code>urls.py</code>:</p> <pre><code>from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('mi-ruta/', views.mi_vista, name='mi_vista'),\n]\n</code></pre> <p>\u00bfYa lo tienes? \u00a1Sigamos con el siguiente paso! \ud83d\udc49\ud83c\udffc</p>"},{"location":"django/como-servir-html/05.servir/","title":"Servir el template con Django","text":"<p>Una vez completados los pasos anteriores, ya puedes ejecutar el proyecto de nuevo con el comando:</p> <pre><code>  python manage.py runserver\n</code></pre> <p>Abre el navegador en localhost:8000/mi-ruta/ para ver el resultado. Prueba a hacer estos cambios para entender mejor c\u00f3mo funciona MVT con Django:</p> <ul> <li>\u00bfC\u00f3mo cambias la ruta para este view?</li> <li>\u00bfC\u00f3mo indicas la ubicaci\u00f3n del template en otra carpeta?</li> </ul> <p>\u00bfYa lo tienes? \u00a1Has completado este tutorial! \ud83d\udc4d\ud83c\udffc M\u00e1s tutoriales de Django en inicio.</p>"},{"location":"django/django-docs/","title":"Django Docs","text":"<ul> <li>Nivel: b\u00e1sico -&gt; intermedio</li> <li>duraci\u00f3n: variable, varias horas</li> <li>Requisitos: tener Python instalado. Recomendable haber completado tutoriales MiPrimerDjango y W3Schools.</li> </ul> <p>Es recomendable completar los tutoriales oficiales de Django en la documentaci\u00f3n. Son en total 8, a continuaci\u00f3n comentamos la importancia de cada parte. Se deben completar de forma secuencial.</p>"},{"location":"django/django-docs/#tutoriales-recomendados","title":"Tutoriales recomendados","text":"<ul> <li>Parte 1: requests y responses: se explica el funcionamiento del sistema de resoluci\u00f3n de peticiones en lado servidor con la arquitectura de Django. Request y responses</li> <li>Parte 2: modelos y admin panel: se explica c\u00f3mo crear modelos para gestionar tablas en base de datos y c\u00f3mo podemos hacer uso del panel de administraci\u00f3n de Django. Models y Admin panel</li> <li>Parte 3: views y templates: se explica c\u00f3mo crear views para servir templates donde puedes usar lenguaje de plantilla de Django. views y templates</li> <li>Parte 4: forms y generic views: creaci\u00f3n de formularios y uso de views disponibles en Django para agilizar la creaci\u00f3n de nuevos views con clases. forms y generic views</li> <li>Parte 5: testing: posiblemente el \u00fanico de la serie que puedes saltar inicialmente o dejar para despu\u00e9s o hacer independientemente en otro momento. Se centra en hacer tests sobre el ejemplo que desarrolla desde el principio. testing</li> <li>Parte 6: static: explica c\u00f3mo funciona Django para servir archivos est\u00e1ticos. static</li> <li>Parte 7: admin site: configuraci\u00f3n de panel de administraci\u00f3n de Django para colocar tus modelos. admin site</li> <li>Parte 8: third-party apps: c\u00f3mo incluir paquetes/m\u00f3dulos de terceros en tu app de Django. Es muy breve. third-party apps</li> </ul>"},{"location":"django/django-docs/#tutoriales-avanzados","title":"Tutoriales avanzados:","text":"<ul> <li>C\u00f3mo hacer apps reutilizables: recomendaciones para crear apps que puedan usar otras personas y publicarlas. reusable apps</li> <li>Contribuyendo a Django: indicaciones sobre c\u00f3mo contribuir al proyecto open source de Django. contributing</li> </ul>"},{"location":"django/mi-primer-django/","title":"Mi Primer Django","text":"<ul> <li>Nivel: b\u00e1sico</li> <li>duraci\u00f3n: 1-2 horas</li> <li>Requisitos: tener Python instalado</li> </ul>"},{"location":"django/mi-primer-django/#parte-1","title":"Parte 1","text":""},{"location":"django/mi-primer-django/#crear-proyecto-miprimerdjango-y-ejecutarlo","title":"Crear proyecto MiPrimerDjango y ejecutarlo","text":"<p>Claro, aqu\u00ed tienes los pasos b\u00e1sicos para crear un proyecto Django llamado <code>MiPrimerDjango</code> y ejecutarlo con <code>runserver</code> usando solo los comandos b\u00e1sicos:</p>"},{"location":"django/mi-primer-django/#paso-1-crear-y-activar-un-entorno-virtual","title":"Paso 1: Crear y Activar un Entorno Virtual","text":"<p>Primero, crea y activa un entorno virtual para tu proyecto. Esto te ayudar\u00e1 a mantener las dependencias del proyecto aisladas.</p>"},{"location":"django/mi-primer-django/#en-windows","title":"En Windows:","text":"<ol> <li> <p>Crear el entorno virtual:     <code>bash     python -m venv venv</code></p> </li> <li> <p>Activar el entorno virtual:     <code>bash     .\\venv\\Scripts\\activate</code></p> </li> </ol>"},{"location":"django/mi-primer-django/#en-macos-y-linux","title":"En macOS y Linux:","text":"<ol> <li> <p>Crear el entorno virtual:     <code>bash     python3 -m venv venv</code></p> </li> <li> <p>Activar el entorno virtual:     <code>bash     source venv/bin/activate</code></p> </li> </ol>"},{"location":"django/mi-primer-django/#paso-2-instalar-django","title":"Paso 2: Instalar Django","text":"<p>Con el entorno virtual activado, instala Django usando pip:</p> <pre><code>pip install django\n</code></pre>"},{"location":"django/mi-primer-django/#paso-3-crear-el-proyecto-django","title":"Paso 3: Crear el Proyecto Django","text":"<p>Crea un nuevo proyecto Django llamado <code>MiPrimerDjango</code> usando el siguiente comando:</p> <pre><code>django-admin startproject MiPrimerDjango\n</code></pre>"},{"location":"django/mi-primer-django/#paso-4-navegar-al-directorio-del-proyecto","title":"Paso 4: Navegar al Directorio del Proyecto","text":"<p>Cambia al directorio del proyecto reci\u00e9n creado:</p> <pre><code>cd MiPrimerDjango\n</code></pre>"},{"location":"django/mi-primer-django/#paso-5-ejecutar-el-servidor-de-desarrollo","title":"Paso 5: Ejecutar el Servidor de Desarrollo","text":"<p>Inicia el servidor de desarrollo de Django con el siguiente comando:</p> <pre><code>python manage.py runserver\n</code></pre>"},{"location":"django/mi-primer-django/#paso-6-acceder-a-la-aplicacion","title":"Paso 6: Acceder a la Aplicaci\u00f3n","text":"<p>Abre tu navegador web y navega a <code>http://127.0.0.1:8000/</code>. Deber\u00edas ver la p\u00e1gina de bienvenida de Django indicando que el servidor est\u00e1 funcionando correctamente.</p>"},{"location":"django/mi-primer-django/#resumen-de-comandos","title":"Resumen de Comandos","text":"<p>Para una referencia r\u00e1pida, aqu\u00ed est\u00e1n todos los comandos juntos:</p>"},{"location":"django/mi-primer-django/#en-windows_1","title":"En Windows:","text":"<pre><code>python -m venv venv\n.\\venv\\Scripts\\activate\npip install django\ndjango-admin startproject MiPrimerDjango\ncd MiPrimerDjango\npython manage.py runserver\n</code></pre>"},{"location":"django/mi-primer-django/#en-macos-y-linux_1","title":"En macOS y Linux:","text":"<pre><code>python3 -m venv venv\nsource venv/bin/activate\npip install django\ndjango-admin startproject MiPrimerDjango\ncd MiPrimerDjango\npython manage.py runserver\n</code></pre> <p>Estos son los pasos b\u00e1sicos para crear y ejecutar un proyecto Django llamado <code>MiPrimerDjango</code>. </p>"},{"location":"django/mi-primer-django/#parte-2","title":"Parte 2","text":""},{"location":"django/mi-primer-django/#tutorial-iniciar-un-proyecto-django-y-mostrar-un-index","title":"Tutorial: Iniciar un Proyecto Django y Mostrar un Index","text":"<p>Este tutorial te guiar\u00e1 a trav\u00e9s de los pasos necesarios para iniciar un proyecto Django, crear un \u00edndice en la carpeta <code>templates</code>, y ver la salida en un puerto.</p>"},{"location":"django/mi-primer-django/#paso-1-crear-entorno-virtual","title":"Paso 1: Crear Entorno Virtual","text":"<ol> <li>Ve a tu carpeta de trabajo.</li> <li>Crea un entorno virtual:    <code>bash    python3 -m venv venv    ls # debe salir la carpeta venv</code></li> <li>Activa el entorno virtual:    <code>bash    source venv/bin/activate</code></li> </ol>"},{"location":"django/mi-primer-django/#paso-2-instalar-django_1","title":"Paso 2: Instalar Django","text":"<ol> <li>Verifica que el entorno virtual est\u00e9 activo y lista los paquetes instalados (deber\u00eda estar vac\u00edo):    <code>bash    pip list</code></li> <li>Instala Django:    <code>bash    pip install django</code></li> <li>Verifica que Django est\u00e9 instalado:    <code>bash    pip list # debe salir Django</code></li> </ol>"},{"location":"django/mi-primer-django/#paso-3-iniciar-proyecto-django","title":"Paso 3: Iniciar Proyecto Django","text":"<ol> <li>Inicia un nuevo proyecto Django:    <code>bash    django-admin startproject MiDjango .</code></li> <li>Verifica la estructura de carpetas y archivos:    <code>bash    tree MiDjango/</code></li> </ol>"},{"location":"django/mi-primer-django/#paso-4-configurar-proyecto-django","title":"Paso 4: Configurar Proyecto Django","text":"<ol> <li> <p>Entra en la carpeta del proyecto:    <code>bash    cd MiDjango    tree</code></p> </li> <li> <p>Abre el archivo <code>settings.py</code> y permite que todos los hosts puedan acceder al proyecto:     <code>python     # En settings.py, busca la l\u00ednea ALLOWED_HOSTS y modif\u00edcala:     ALLOWED_HOSTS = ['*']</code></p> </li> <li> <p>Crea las carpetas <code>static</code> y <code>templates</code> en la ra\u00edz del proyecto:     <code>bash     mkdir static templates</code></p> </li> <li> <p>Configura Django para que use la carpeta <code>templates</code>:     <code>python     # En settings.py, busca TEMPLATES y modif\u00edcalo as\u00ed:     'DIRS': [BASE_DIR / \"templates\"],</code></p> </li> </ol>"},{"location":"django/mi-primer-django/#paso-5-crear-una-pagina-de-inicio","title":"Paso 5: Crear una P\u00e1gina de Inicio","text":"<ol> <li> <p>Crea un archivo <code>index.html</code> en la carpeta <code>templates</code> con el siguiente contenido:     <code>html     &lt;!DOCTYPE html&gt;     &lt;html&gt;     &lt;head&gt;         &lt;title&gt;Mi P\u00e1gina de Inicio&lt;/title&gt;     &lt;/head&gt;     &lt;body&gt;         &lt;h1&gt;\u00a1Hola, mundo!&lt;/h1&gt;     &lt;/body&gt;     &lt;/html&gt;</code></p> </li> <li> <p>Crea una vista en <code>views.py</code> para renderizar <code>index.html</code>:     ```python     # En MiDjango/views.py, a\u00f1ade:     from django.shortcuts import render</p> <p>def index(request):     return render(request, \"index.html\") ```</p> </li> </ol>"},{"location":"django/mi-primer-django/#paso-6-configurar-urls","title":"Paso 6: Configurar URLs","text":"<ol> <li> <p>Configura las URLs en <code>urls.py</code> para incluir la nueva vista:     ```python     # En MiDjango/urls.py, modifica el archivo para que se vea as\u00ed:     from django.contrib import admin     from django.urls import path</p> <p>from .views import index</p> <p>urlpatterns = [     path('admin/', admin.site.urls),     path('', index, name=\"index\"), ] ```</p> </li> </ol>"},{"location":"django/mi-primer-django/#paso-7-ejecutar-el-servidor","title":"Paso 7: Ejecutar el Servidor","text":"<ol> <li> <p>Guarda todos los archivos y ejecuta el servidor:     <code>bash     python manage.py runserver</code></p> </li> <li> <p>Abre tu navegador y ve a <code>http://localhost:8000</code> (o el puerto que se indique) para ver la p\u00e1gina de inicio.</p> </li> </ol>"},{"location":"django/mi-primer-django/#resumen-de-la-estructura-de-directorios","title":"Resumen de la Estructura de Directorios","text":"<p>Despu\u00e9s de seguir estos pasos, tu estructura de directorios deber\u00eda verse as\u00ed:</p> <pre><code>MiDjango/\n\u251c\u2500\u2500 manage.py\n\u251c\u2500\u2500 MiDjango/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 __pycache__/\n\u2502   \u251c\u2500\u2500 asgi.py\n\u2502   \u251c\u2500\u2500 settings.py\n\u2502   \u251c\u2500\u2500 urls.py\n\u2502   \u251c\u2500\u2500 views.py\n\u2502   \u2514\u2500\u2500 wsgi.py\n\u251c\u2500\u2500 static/\n\u2514\u2500\u2500 templates/\n    \u2514\u2500\u2500 index.html\n</code></pre>"},{"location":"django/mi-primer-django/#ejemplo-de-urlspy-completo","title":"Ejemplo de <code>urls.py</code> Completo","text":"<pre><code>from django.contrib import admin\nfrom django.urls import path\nfrom .views import index\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', index, name=\"index\"),\n]\n</code></pre>"},{"location":"django/mi-primer-django/#ejemplo-de-viewspy-completo","title":"Ejemplo de <code>views.py</code> Completo","text":"<pre><code>from django.shortcuts import render\n\ndef index(request):\n    return render(request, \"index.html\")\n</code></pre> <p>\u00a1Felicidades! Ahora tienes un proyecto Django b\u00e1sico corriendo con una p\u00e1gina de inicio.</p>"},{"location":"django/primeros-pasos/","title":"Parte 1 de 3: Primeros Pasos con Django","text":"<ul> <li>Nivel: b\u00e1sico</li> <li>duraci\u00f3n: 1 hora</li> <li>Requisitos: tener Python instalado</li> </ul> <p>Bienvenido a los primeros pasos para trabajar con Django. Aqu\u00ed encontrar\u00e1s una serie de gu\u00edas para ayudarte a configurar tu entorno y comenzar a desarrollar con Django.</p>"},{"location":"django/primeros-pasos/#contenidos","title":"Contenidos","text":"<ul> <li>Instalar Python: Aprende a instalar Python en tu sistema.</li> <li>Crear venv: Configura un entorno virtual para tu proyecto.</li> <li>Ejecutar Django: Inicia un proyecto Django y ejecuta el servidor de desarrollo.</li> </ul> <p>Estas gu\u00edas est\u00e1n dise\u00f1adas para ayudarte a comenzar r\u00e1pidamente con Django, asegur\u00e1ndote de que tienes todas las herramientas y configuraciones necesarias para desarrollar aplicaciones web.</p> <p>Regresar a los Tutoriales de Django</p>"},{"location":"django/primeros-pasos/crear-venv/","title":"Parte 2 de 3: Crear un Entorno Virtual (venv)","text":"<p>Para mantener las dependencias de tus proyectos de Python aisladas, es una buena pr\u00e1ctica utilizar entornos virtuales. A continuaci\u00f3n, se describen los pasos para crear y activar un entorno virtual.</p>"},{"location":"django/primeros-pasos/crear-venv/#pasos-para-crear-un-entorno-virtual","title":"Pasos para Crear un Entorno Virtual","text":"<ol> <li> <p>Instalar venv:</p> <ul> <li>Python 3.3 y versiones posteriores ya incluyen el m\u00f3dulo <code>venv</code>. No necesitas instalar nada adicional.</li> </ul> </li> <li> <p>Crear un Entorno Virtual:</p> <ul> <li>Abre una terminal y navega hasta el directorio de tu proyecto.</li> <li>Ejecuta el siguiente comando para crear un entorno virtual llamado <code>venv</code>:   <code>bash   python -m venv venv</code></li> </ul> </li> <li> <p>Activar el Entorno Virtual:</p> <ul> <li>En Windows:   <code>bash   .\\venv\\Scripts\\activate</code></li> <li>En macOS y Linux:   <code>bash   source venv/bin/activate</code></li> </ul> </li> <li> <p>Verificar la Activaci\u00f3n:</p> <ul> <li>Despu\u00e9s de activar el entorno virtual, deber\u00edas ver el nombre del entorno (por ejemplo, <code>(venv)</code>) al principio de la l\u00ednea de comandos en tu terminal.</li> </ul> </li> </ol>"},{"location":"django/primeros-pasos/crear-venv/#desactivar-el-entorno-virtual","title":"Desactivar el Entorno Virtual","text":"<p>Para desactivar el entorno virtual y volver al entorno global de Python, simplemente ejecuta:</p> <pre><code>deactivate\n</code></pre> <p>Regresar a los Primeros Pasos</p>"},{"location":"django/primeros-pasos/ejecutar-django/","title":"Parte 3 de 3: Ejecutar un Proyecto Django","text":"<p>Despu\u00e9s de haber configurado un entorno virtual y haber instalado Django, est\u00e1s listo para crear y ejecutar un proyecto Django. A continuaci\u00f3n, se describen los pasos para iniciar un nuevo proyecto y ejecutarlo.</p>"},{"location":"django/primeros-pasos/ejecutar-django/#pasos-para-crear-y-ejecutar-un-proyecto-django","title":"Pasos para Crear y Ejecutar un Proyecto Django","text":"<ol> <li> <p>Instalar Django:</p> <ul> <li>Aseg\u00farate de que tu entorno virtual est\u00e9 activado.</li> <li>Instala Django usando pip:   <code>bash   pip install django</code></li> </ul> </li> <li> <p>Crear un Proyecto Django:</p> <ul> <li>Ejecuta el siguiente comando para crear un nuevo proyecto Django llamado <code>mi_proyecto</code>:   <code>bash   django-admin startproject mi_proyecto</code></li> </ul> </li> <li> <p>Navegar al Directorio del Proyecto:</p> <ul> <li>Cambia al directorio del proyecto reci\u00e9n creado:   <code>bash   cd mi_proyecto</code></li> </ul> </li> <li> <p>Iniciar el Servidor de Desarrollo:</p> <ul> <li>Ejecuta el siguiente comando para iniciar el servidor de desarrollo de Django:   <code>bash   python manage.py runserver</code></li> </ul> </li> <li> <p>Verificar la Ejecuci\u00f3n:</p> <ul> <li>Abre tu navegador web y navega a <code>http://127.0.0.1:8000/</code>. Deber\u00edas ver la p\u00e1gina de bienvenida de Django.</li> </ul> </li> </ol>"},{"location":"django/primeros-pasos/ejecutar-django/#crear-una-aplicacion-dentro-del-proyecto-django","title":"Crear una Aplicaci\u00f3n dentro del Proyecto Django","text":"<ol> <li> <p>Crear una Nueva Aplicaci\u00f3n:</p> <ul> <li>Ejecuta el siguiente comando para crear una nueva aplicaci\u00f3n llamada <code>mi_aplicacion</code>:   <code>bash   python manage.py startapp mi_aplicacion</code></li> </ul> </li> <li> <p>Registrar la Aplicaci\u00f3n en el Proyecto:</p> <ul> <li>Abre el archivo <code>settings.py</code> en el directorio <code>mi_proyecto</code> y agrega <code>mi_aplicacion</code> a la lista de <code>INSTALLED_APPS</code>:   <code>python   INSTALLED_APPS = [       ...,       'mi_aplicacion',   ]</code></li> </ul> </li> </ol> <p>Regresar a los Primeros Pasos</p>"},{"location":"django/w3schools/","title":"W3Schools","text":"<p>Es recomendable completar el tutorial de Django de W3schools.</p>"},{"location":"blog/archive/2024/","title":"2024","text":""},{"location":"blog/category/python/","title":"Python","text":""},{"location":"blog/category/azure/","title":"Azure","text":""},{"location":"blog/category/microsoft/","title":"Microsoft","text":""},{"location":"blog/category/django/","title":"Django","text":""},{"location":"tags/","title":"Etiquetas","text":""},{"location":"tags/#az900","title":"AZ900","text":"<ul> <li>AZ 900</li> </ul>"},{"location":"tags/#matplotlib","title":"Matplotlib","text":"<ul> <li>Librer\u00edas Fundamentales de Python</li> </ul>"},{"location":"tags/#numpy","title":"Numpy","text":"<ul> <li>Librer\u00edas Fundamentales de Python</li> </ul>"},{"location":"tags/#pandas","title":"Pandas","text":"<ul> <li>Librer\u00edas Fundamentales de Python</li> </ul>"},{"location":"tags/#scikit","title":"Scikit","text":"<ul> <li>Librer\u00edas Fundamentales de Python</li> </ul>"},{"location":"tags/#seaborn","title":"Seaborn","text":"<ul> <li>Librer\u00edas Fundamentales de Python</li> </ul>"},{"location":"tags/#certificaciones","title":"certificaciones","text":"<ul> <li>AZ 900</li> </ul>"},{"location":"tags/#cloud","title":"cloud","text":"<ul> <li>AZ 900</li> </ul>"},{"location":"tags/#full-stack","title":"full-stack","text":"<ul> <li>Introducci\u00f3n a Django</li> </ul>"},{"location":"tags/#intro","title":"intro","text":"<ul> <li>Introducci\u00f3n a Django</li> </ul>"}]}